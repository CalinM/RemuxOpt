name: Build and Release

on:
  push:
    branches:
      - master
    tags:
      - 'v*'

jobs:
  build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Get version from project
        id: version
        run: |
          # Find the .csproj file
          $csprojFile = Get-ChildItem -Path . -Filter "*.csproj" -Recurse | Select-Object -First 1
          if (-not $csprojFile) {
            Write-Error "Could not find any .csproj file"
            exit 1
          }
          
          Write-Host "Found .csproj file: $($csprojFile.FullName)"
          
          # Store the project path for later use
          $relativePath = $csprojFile.FullName.Replace((Get-Location).Path + "\", "").Replace("\", "/")
          echo "PROJECT_PATH=$relativePath" >> $env:GITHUB_OUTPUT
          
          # Read and parse the XML
          [xml]$projectXml = Get-Content $csprojFile.FullName
          $versionNode = $projectXml.SelectSingleNode("//Version")
          
          if (-not $versionNode -or [string]::IsNullOrEmpty($versionNode.InnerText)) {
            Write-Error "Could not find <Version> element in $($csprojFile.Name)"
            Write-Host "Project file content:"
            Get-Content $csprojFile.FullName | Write-Host
            exit 1
          }
          
          $version = $versionNode.InnerText.Trim()
          Write-Host "Found version: $version"
          echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        shell: powershell

      - name: Check if release exists
        id: check_release
        run: |
          $version = "${{ steps.version.outputs.VERSION }}"
          $tag = "v$version"
          $releaseExists = $false
          Write-Host "Checking if release $tag already exists..."
          
          # Use GitHub API directly
          $headers = @{
            'Authorization' = "token $env:GITHUB_TOKEN"
            'Accept' = 'application/vnd.github.v3+json'
          }
          
          try {
            $response = Invoke-RestMethod -Uri "https://api.github.com/repos/$env:GITHUB_REPOSITORY/releases/tags/$tag" -Headers $headers -Method Get
            if ($response) {
              $releaseExists = $true
              Write-Host "Release $tag already exists, skipping build steps..."
            }
          } catch {
            if ($_.Exception.Response.StatusCode -eq 404) {
              Write-Host "Release $tag does not exist, proceeding with build..."
            } else {
              Write-Host "Error checking release: $($_.Exception.Message)"
              Write-Host "Proceeding with build anyway..."
            }
          }
          
          echo "RELEASE_EXISTS=$($releaseExists.ToString().ToLower())" >> $env:GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: powershell

      - name: Clean for fresh build
        if: steps.check_release.outputs.RELEASE_EXISTS == 'false'
        run: dotnet clean "${{ steps.version.outputs.PROJECT_PATH }}" --configuration Release

      - name: Restore dependencies
        if: steps.check_release.outputs.RELEASE_EXISTS == 'false'
        run: dotnet restore "${{ steps.version.outputs.PROJECT_PATH }}" --runtime win-x64

      - name: Restore dependencies for x86
        if: steps.check_release.outputs.RELEASE_EXISTS == 'false'
        run: dotnet restore "${{ steps.version.outputs.PROJECT_PATH }}" --runtime win-x86

      - name: Build Release
        if: steps.check_release.outputs.RELEASE_EXISTS == 'false'
        run: dotnet build "${{ steps.version.outputs.PROJECT_PATH }}" --configuration Release --no-restore

      - name: Publish Windows x64
        if: steps.check_release.outputs.RELEASE_EXISTS == 'false'
        run: dotnet publish "${{ steps.version.outputs.PROJECT_PATH }}" --configuration Release --runtime win-x64 --self-contained true --output ./publish/win-x64 --no-restore

      - name: Publish Windows x86
        if: steps.check_release.outputs.RELEASE_EXISTS == 'false'
        run: dotnet publish "${{ steps.version.outputs.PROJECT_PATH }}" --configuration Release --runtime win-x86 --self-contained true --output ./publish/win-x86 --no-restore

      - name: Create ZIP packages
        if: steps.check_release.outputs.RELEASE_EXISTS == 'false'
        run: |
          Compress-Archive -Path ./publish/win-x64/* -DestinationPath ./RemuxOpt-win-x64.zip -Force
          Compress-Archive -Path ./publish/win-x86/* -DestinationPath ./RemuxOpt-win-x86.zip -Force
          Write-Host "Created ZIP packages:"
          Get-Item ./RemuxOpt-win-*.zip | ForEach-Object {
            Write-Host "$($_.Name): $($_.Length) bytes"
          }
        shell: powershell

      - name: Create Release
        if: steps.check_release.outputs.RELEASE_EXISTS == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.VERSION }}
          name: RemuxOpt v${{ steps.version.outputs.VERSION }}
          files: |
            ./RemuxOpt-win-x64.zip
            ./RemuxOpt-win-x86.zip
          body: |
            ## RemuxOpt v${{ steps.version.outputs.VERSION }}
            Auto-generated release from GitHub Actions build.
            ## Download
            - **Windows 64-bit**: RemuxOpt-win-x64.zip
            - **Windows 32-bit**: RemuxOpt-win-x86.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
