<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMIOAADCDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAACwAAAA0AAAAGAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAAAsAAAAVAAAAGQAAABmAAAAZwAA
        AGcAAABaAAAALgAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAvAAAAaQAAAFsAAAAvAAAAEgAA
        AAcAAAAGAAAADQAAACgAAABcAAAAYgAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANAAAAWQAAAF8AAAAcAAAAAQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAA0AAAAbgAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAAAAGcAAAA+AAAAAwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA2AAAAYQAAAAMAAAAAAAAAAAAA
        AAAAAAAAXFxcAlxcXCpcXFxpXFxcjlxcXJZcXFyVXFxcilxcXHJcXFxRXFxcLUpLSxMVBQVZLScnV2Bh
        YTNfXl4RqQAADqQAACykAAA+pAAANqQAABukAAAEpAAAAAAAAAAAAAAAAAAAAAAAAAEAAABeAAAAMAAA
        AAAAAAAAAAAAAAAAAABcXFxsXFxc3VxcXNJcXFymXFxcj1xcXItcXFyUXFxcp1xcXLxdXV3GXFtbvlpX
        V7ZdXFzfXFxc8V9YWMKNHx9wpwAAbaQAAJ6kAADXpAAA3KQAAJukAAA3pAAAAqQAAAAAAAAAAAAAAAAA
        ACYAAABgAAAAAAAAAAAAAAAAAAAAAFxcXOVcXFyNXFxcFlxcXAFcXFwAXFxcAFxcXABcXFwCYmJiCiMj
        I09NTU12XFxc8lxcXP9cXFz/XFxc/11bW6JZX18gniwsBakAADCkAAC1pAAA/6QAAOekAABppAAABaQA
        AAAAAAAAAAAACAAAAGkAAAAOAAAAAAAAAAAAAAAAXFxcylxcXCpcXFwAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAdAAAAZ0xNTTpcXFzsXFxc/1xcXP9cXFz/XFxc3lxcXLxcXFySV2JiO5QXFyOlAADApAAA/6QA
        APKkAABgpAAAAJkAAAAAAAAAAAAAXQAAACAAAAAAAAAAAAAAAABcXFx9XFxcN1xcXABcXFwAAAAAAAAA
        AAAAAAAABgAAAAEAAFsAAAAxe1tbDGNTU71cXFz/XFxc/1xcXO5cXFxTXFxcI1xcXHBcXFy1W11dp3c5
        OYWgBga6pQAA86QAANukAAAmpAAAAAAAAAAAAABUAAAAKwAAAAAAAAAAAAAAAFxcXB9cXFxRXFxcBlxc
        XAAAAAAAAAAAAAAAAAAAAAAZAwAAaAAAAASrAAAYkxcXblxcXHZcXFyRXFxcSlxcXARcXFwAXFxcAFxc
        XBJcXFxdW11dsl5ZWbWALi6ZogQEw6YAAG2jAAAAAQAAAAAAAFMAAAAsAAAAAAAAAAAAAAAAXFxcAFxc
        XCNcXFwqXFxcAVxcXAAAAAAAAAAAAAAAAEYAAABCVgAAAKQAAD+kAABrpAAAAJQAAAAAAAAAAAAAAAAA
        AAAAAAAAXFxcAIMqKgB3OjoacUFBilxcXL9iVFSzfjExY4QpKQMMBwcAAAAAWQAAACQAAAAAAAAAAAAA
        AABcXFwAW1tbAVxcXBpcXFwcXFxcAj8/PwAAAAACAAAAYwAAABt6AAAApAAAVqQAAJSeAwMBowEBAAAA
        AAAAAAAAAAAAAAAAAAAAAAAApQAAAKUAAC6lAADTmQ4OqmtJSaJaXl7IXFxceVBQUBQAAABiAAAAFAAA
        AAAAAAAAAAAAAAAAAABcXFwAXFxcAFxcXBBcXFwWbW1tAwAAAA4AAABnAAAAB5sAAACkAABOpAAA1aQA
        ACakAAAAnAICAAAAAAAAAAAAAAAAAKQAAAClAAAApAAAe6QAAP+kAAD+pAEB1YYmJo9cXFy3W1tbtjQ0
        NFcAAAAEGBgYAAAAAAAAAAAAAAAAAAAAAABcXFwAXFxcAFxcXAdmZmYPERERIgAAAF8EBAQAowAAAKQA
        ACykAADopAAApKQAABOkAAAAogEBAAAAAACiAQEAiwoKAKQAAEqkAADmpAAA/6QAAP+kAAD/pQAAll1d
        XRNcXFyLXFxcz1tbW1FeXl4CXFxcAAAAAAAAAAAAAAAAAAAAAABcXFwAXFxcAAAAAAAPDw8qAQEBVwMD
        AwCkAAAApAAACKQAAK+kAAD/pAAAtqQAAEqkAAAbowAAFKQAACukAAB6pAAA56YAAOynAADJpwAAxacA
        ANumAABQ/x8fAAYGBkdSUlJ0XFxc2FxcXGRcXFwCXFxcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        ACMAAABXAAAAAJ0AAACkAAAApAAARKQAAOukAAD/pAAA9aQAANukAADTpAAA6KQAAPmgAAasSwBodxIA
        q48QAK6TMgCGcVgAcRIAAAAmAAAAZBkZGQRcXFxbXFxc3FxcXFtcXFwAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAGgAAAGAAAAAAAAAAAKQAAACkAAACpAAAbqQAAPKkAAD/pAAA/6QAAP+kAAD/oAAFqhMA
        rYYAAMPsAADB/wAAwf8AAML1AADDlgAAKEcAAAAlCQkJAFxcXAFcXFxxXFxc2FxcXDkAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAALAAAAaQAAAAoAAAAAAAAAAKQAAACkAAAFpAAAWaQAANGkAAD8pAAA/6YA
        AOtOAGd3AADD6gAAwP8AAMD/AADA/wAAwP8AAMD7AAC7ZwAA/wAAAB0AXFxcAFxcXAxcXFy1XFxcswAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABdAAAAKQAAAAAAAAAAAAAAAKQAAAC0AAAAowAAHKMA
        AGGkAACbqAAAjhIAq4kAAMH/AADA/wAAwP8AAMD/AADA/wAAwP8AAMClAADCAgAAwQBcXFwAXFxcAFtb
        W21cXFzwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC0AAABeAAAAAQAAAAAAAAAAAAAAAAAA
        AAAAAAAApAAAAKQAAAEAAP8AAAC/dgAAwP8AAMD/AADA/wAAwP8AAMD/AADA/wAAwKAAAMIBAADBAFxc
        XABcXFwCXFxcjlxcXNQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAGEAAAA1AAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAMA1AADA5wAAwP8AAMD/AADA/wAAwP8BAb/5Cgq1Y3t7
        OgpcXFwUXFxcLFxcXG5cXFyhXFxcPAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAAA
        AG8AAAAxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACyAAAAngIAALhnAADA4wAAwP8AAMD/AADA7QIC
        voZBQXkfXl5aH1xcXCtcXFw3XFxcLVxcXAtcXFwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAFwAAAGYAAABXAAAAIAAAAAgAAAACAAAAAwAAAAoAAAAiAAAAUAAABU4AALEvAADAYgAA
        wGgAAMA4AADABQAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAABwAAADUAAABfAAAAZwAAAF4AAABgBgAAZwIAAF4AAAA5AAAADQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAALAAAAEgAAABERAAAJLwAAASUA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///////////////////D///+AH//+AA///B+H//h/48AAAePAAABzw4A
        AMc/AADnPwAAZx4AwGeOT/AnhEfwB+BH8Afww+AD/MAAQfzgAAH84AAQ/HAAOP58ABz+P0AY/j/AAP8f
        wAH/gAB//8AP///wP/////////////////8=
</value>
  </data>
</root>